version: '3'

tasks:
  add-var:
    desc: Add a variable to the Terraform vars file
    internal: true
    cmds:
      - >
        if [ ! -z "{{ .value }}" ];
        then
          cat <<< $(jq '.{{ .key }}="{{ .value }}"' {{ .file }}) > {{ .file }};
        elif [ ! -z "{{ .default }}" ];
        then
          cat <<< $(jq '.{{ .key }}="{{ .default }}"' {{ .file }}) > {{ .file }};
        fi;

  new-cloudspace:
    vars:
      NAME:
        sh: task random-name NAME="{{ .NAME }}"
    cmds:
      - mkdir -p cloudspace/vars/{{ .NAME }} kubeconfig/vars/{{ .NAME }}
      - echo "{}" > cloudspace/vars/{{ .NAME }}/tfvars.json
      - task: add-var
        vars:
          key: "cloudspace_name"
          value: "{{ .NAME }}"
          file: "cloudspace/vars/{{ .NAME }}/tfvars.json"
      - task: add-var
        vars:
          key: "region"
          value: "{{ .REGION }}"
          file: "cloudspace/vars/{{ .NAME }}/tfvars.json"
      - task: add-var
        vars:
          key: "ha_control_plane"
          value: "{{ .HA_CONTROL_PLANE }}"
          file: "cloudspace/vars/{{ .NAME }}/tfvars.json"
      - task: add-var
        vars:
          key: "preemption_webhook"
          value: "{{ .PREEMPTION_WEBHOOK }}"
          file: "cloudspace/vars/{{ .NAME }}/tfvars.json"

  add-node-pool:
    vars:
      NODEPOOL_NAME:
        sh: task random-name NAME="{{ .NODEPOOL_NAME }}"
    cmds:
      - mkdir -p cloudspace/vars/{{ .NAME }}/nodepools
      - echo "{}" > cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json
      - task: add-var
        vars:
          key: "name"
          value: "{{ .NODEPOOL_NAME }}"
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "cpus"
          value: "{{ .CPUS }}"
          default: ">4"
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "memory"
          value: "{{ .MEMORY }}"
          default: ">8GB"
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "min_nodes"
          value: "{{ .MIN_NODES }}"
          default: 1
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "max_nodes"
          value: "{{ .MAX_NODES }}"
          default: 10
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "category"
          value: "{{ .CATEGORY }}"
          default: "General Purpose"
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"
      - task: add-var
        vars:
          key: "max_bid"
          value: "{{ .MAX_BID }}"
          default: 0.008
          file: "cloudspace/vars/{{ .NAME }}/nodepools/{{ .NODEPOOL_NAME }}.json"

  lint:
    desc: Lint the Terraform files
    dir: "{{ .WORKSPACE }}"
    internal: true
    cmds:
      - echo "Linting {{ .WORKSPACE }} Terraform files"
      - tflint

  lint-all:
    desc: Lint all Terraform files
    cmds:
      - task: lint
        vars:
          WORKSPACE: cloudspace
      - task: lint
        vars:
          WORKSPACE: cloudspace-health
      - task: lint
        vars:
          WORKSPACE: cloudspace-kubeconfig

  init-all:
    desc: Initialize the Cloudspace Terraform workspace
    vars:
      NAMES:
        sh: ls -1 cloudspace/vars
    cmds:
      - task: each-env
        vars:
          TASK: init
          WORKSPACE: cloudspace
      - task: each-env
        vars:
          TASK: init
          WORKSPACE: cloudspace-health
      - task: each-env
        vars:
          TASK: init
          WORKSPACE: cloudspace-kubeconfig

  plan-cloudspace:
    desc: Plan the Cloudspace Terraform changes.
    precondition: test -d vars/{{ .NAME }}
    cmds:
      - task: plan
        vars:
          WORKSPACE: cloudspace
          TF_VAR_FILE: "-var-file=vars/{{ .NAME }}/tfvars.json"
          NAME: "{{ .NAME }}"

  plan-all-cloudspaces:
    desc: Plan all Cloudspace Terraform changes.
    cmds:
      - mkdir -p cloudspace/vars
      - task: each-env
        vars:
          TASK: plan-cloudspace

  apply-cloudspace:
    desc: Apply the Cloudspace Terraform changes.
    precondition: test -f vars/{{ .NAME }}/plan.tfplan
    cmds:
      - task: apply
        vars:
          WORKSPACE: cloudspace
          NAME: "{{ .NAME }}"

  apply-all-cloudspaces:
    desc: Apply all Cloudspace Terraform changes.
    cmds:
      - task: each-env
        vars:
          TASK: apply-cloudspace


  destroy-cloudspace:
    desc: Destroy the Cloudspace Terraform resources.
    cmds:
      - task: destroy
        vars:
          WORKSPACE: cloudspace

  show-health:
    desc: Show the Health Terraform resources.
    dir: cloudspace-health
    cmds:
      - task: plan
        vars:
          WORKSPACE: cloudspace-health
          NAME: "{{ .NAME }}"
      - >
        terraform show -json vars/{{ .NAME }}/plan.tfplan | jq '{ 
          "cshealth": .planned_values.outputs.cshealth.value,
          "csphase": .planned_values.outputs.csphase.value,
          "csreason": .planned_values.outputs.csreason.value
        }' > vars/{{ .NAME }}/health.json
      - rm vars/{{ .NAME }}/plan.tfplan
      - jq . vars/{{ .NAME }}/health.json

  show-all-health:
    desc: Show all Health Terraform resources.
    cmds:
      - task: each-env
        vars:
          TASK: show-health
  
  plan-kubeconfig:
    desc: Get the Kubeconfig for the Cloudspace
    cmds:
      - task: plan
        vars:
          WORKSPACE: cloudspace-kubeconfig
          NAME: "{{ .NAME }}"
  
  plan-all-kubeconfigs:
    desc: Get all Kubeconfigs for the Cloudspace
    cmds:
      - task: each-env
        vars:
          TASK: plan-kubeconfig

  apply-kubeconfig:
    desc: Apply the Kubeconfig for the Cloudspace
    cmds:
      - task: apply
        vars:
          WORKSPACE: cloudspace-kubeconfig
          NAME: "{{ .NAME }}"
  
  apply-all-kubeconfigs:
    desc: Apply all Kubeconfigs for the Cloudspace
    cmds:
      - task: each-env
        vars:
          TASK: apply-kubeconfig

  destroy-kubeconfig:
    desc: Destroy the Kubeconfig for the Cloudspace
    cmds:
      - task: destroy
        vars:
          WORKSPACE: cloudspace-kubeconfig
          NAME: "{{ .NAME }}"

  each-env:
    desc: Run a task for each environment
    vars:
      NAMES:
        sh: ls -1 cloudspace/vars
    cmds:
      - for: { var: NAMES, as: ITEM }
        task: "{{ .TASK }}"
        vars:
          NAME: "{{ .ITEM }}"
          WORKSPACE: "{{ .WORKSPACE }}"

  tf:
    desc: Run a Terraform command
    env:
      TF_IN_AUTOMATION: 1
      TF_WORKSPACE: "{{ .NAME }}"
      TF_VAR_cloudspace_name: "{{ .NAME }}"
    dir: "{{ .WORKSPACE }}"
    internal: true
    cmds:
      - terraform {{ .GLOBAL_ARGS }} {{ .ACTION }} {{ .ARGS }}

  init:
    desc: Initialize the Terraform workspace
    internal: true
    cmds:
      - task: tf
        vars:
          WORKSPACE: "{{ .WORKSPACE }}"
          ACTION: "init"
          ARGS: "-upgrade -backend-config=bucket=${TF_VAR_BUCKET_NAME}"
          NAME: "{{ .NAME }}"

  plan:
    desc: Plan the Terraform changes.
    internal: true
    dir: "{{ .WORKSPACE }}"
    cmds:
      - task: tf
        vars:
          WORKSPACE: "{{ .WORKSPACE }}"
          ACTION: "plan"
          ARGS: "{{ .TF_VAR_FILE }} -out=vars/{{ .NAME }}/plan.tfplan"
          NAME: "{{ .NAME }}"

  apply:
    desc: Apply the Terraform changes.
    internal: true
    dir: "{{ .WORKSPACE }}"
    cmds:
      - task: tf
        vars:
          WORKSPACE: "{{ .WORKSPACE }}"
          ACTION: "apply"
          ARGS: "vars/{{ .NAME }}/plan.tfplan"
          NAME: "{{ .NAME }}"
      - rm -f vars/{{ .NAME }}/plan.tfplan
  
  destroy:
    desc: Destroy the Terraform resources.
    internal: true
    cmds:
      - task: tf
        vars:
          WORKSPACE: "{{ .WORKSPACE }}"
          ACTION: "destroy"
          ARGS: "-auto-approve"
          NAME: "{{ .NAME }}"

  show-plan:
    desc: Show the Terraform resources.
    internal: true
    cmds:
      - task: tf
        vars:
          WORKSPACE: "{{ .WORKSPACE }}"
          ACTION: "show"
          ARGS: "-json vars/{{ .NAME }}/plan.tfplan | jq {{ .JQ_ARGS }} '{{ .JQ_QUERY }}' | tee vars/{{ .NAME }}/output.json"
          NAME: "{{ .NAME }}"

  random-name:
    desc: Generate a random word
    silent: true
    vars:
      NUM_WORDS: 2
      ALL_NON_RANDOM_WORDS: /usr/share/dict/words
    cmds:
      - >
        if [ -z "{{ .NAME }}" ];
        then
          X=0;
          NAME="";
          COUNT_WORDS=`cat {{ .ALL_NON_RANDOM_WORDS }} | wc -l`;
          while [ "$X" -lt {{ .NUM_WORDS }} ]; do
            RANDOM_NUMBER=`od -N3 -An -i /dev/urandom | 
                            awk -v f=0 -v r="$COUNT_WORDS" '{printf "%i\n", f + r * $1 / 16777216}'`;
            WORD=$(sed `echo $RANDOM_NUMBER`"q;d" {{ .ALL_NON_RANDOM_WORDS }} | tr '[:upper:]' '[:lower:]');
            X=$((X+1));
            if [ "$X" -lt {{ .NUM_WORDS }} ]; then
              NAME=`echo "$NAME$WORD-"`;
            else
              NAME="$NAME$WORD";
            fi;
          done;
          echo $NAME;
        else
          echo "{{ .NAME }}";
        fi;
